#include <iostream>
using namespace std;
/*
题目：一直往里边输入数据，以-1结束，不给输入的个数

采用动态数组的想法：
①先申请一块小一点的空间
②加入一个计数器，如果放入的元素不够用了，就把原来的空间还掉，并且再申请一块更大的数组空间

*/
int main()
{
	int zengjia=10;//先申请一块小空间是20个
	int xiao=20,count=0,x;//每次增加10个元素，加到xiao上面》》xiao+=zengjia
	
	int *p=new int[xiao];//动态数组的申请方式(①说明数组的大小 ②说明指针指向哪一个数组)，如果单纯让指针指向一个数组可以int *p=&a[0];但现在是一个动态数组了 
						//应该不断更改p所指向的动态数组的大小的 
	
	cin >> x;//开始往数组里边输入元素了（现在不采用for的方法输入，用多次cin+循环的方法来判断现在的空间够不够，不够得得申请一个更大的数组）
	while(x!=-1)
	{
		if(count ==xiao)//小数组地方不够用了》》》申请更大的、转移数据、删除原来的数组。进循环的条件是count=xiao 。【这个地方写大于等于或者等于都是可以的】 
		{
			xiao+=zengjia;
			int *q = new int[xiao];//千万别和外边现有得指针重名了，下面需要赋值的.如果后面的不是动态数组而是一个普通数组，应该用int *p=&a[0] 
			for(int i=0;i<count;i++)
				q[i]=p[i];//转移数据 
			delete[]p;
			p=q; //  让p指向新的大的数组！原来p还是指向小数组的 
		} 
		p[count]=x;
		count++;
		cin >> x; 
	 } 
	for(int i=0;i<count;i++)//错误：输出的时候可能没有填满新增加的大数组的，里边的元素其实只有count个。 
		cout << *(p+i) << " ";
	return 0;
}

/*
本题中的count不光是循环中的计数器。他不会被重置，也计算着现在数组中有多少个元素的！ 
*/
